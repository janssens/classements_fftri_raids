# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    from_email:
        address: "%env(FROM_EMAIL)%"
        sender_name: "%env(FROM_EMAIL)%"
    secret: "%env(APP_SECRET)%"
    app.path.ranking_files: "/races/rankings"
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Command\:
        resource: '../src/Command'
        tags: [ 'console.command' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Helper\:
        resource: '../src/Helper'
        arguments: ['@service_container']
        tags: ['controller.service_arguments']

    app.form.registration:
        class: App\Form\RegistrationFormType
        tags:
            - { name: form.type, alias: app_user_registration }

    join_athlete:
        class: App\EventListener\JoinAthleteListener
        public: true
        arguments:
            $entity_manager: "@doctrine.orm.entity_manager"
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    set_password:
        class: App\EventListener\SetFirstPasswordListener
        public: true
        arguments:
            $entity_manager: "@doctrine.orm.entity_manager"
            $router: "@router"
            $token_storage: '@security.token_storage'
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: kernel.event_listener, event: kernel.request, method: forcePasswordChange }
            - { name: kernel.event_listener, event: fos_user.change_password.edit.completed, method: onPasswordChanged }

    emailing_event_listener:
        class: App\EventListener\EmailingEventListener
        arguments:
            $mailer: "@mailer"
            $container: "@service_container"
            $fromEmail: "%from_email%"
        tags:
            - { name: kernel.event_listener, event: planned_team.new, method: onPlannedTeamNew }
            - { name: kernel.event_listener, event: planned_team.edit, method: onPlannedTeamEdit }
            - { name: kernel.event_listener, event: planned_team.delete, method: onPlannedTeamDelete }
            - { name: kernel.event_listener, event: planned_team.confirm, method: onPlannedTeamConfirm }
            - { name: kernel.event_listener, event: planned_team.decline, method: onPlannedTeamDecline }
            - { name: kernel.event_listener, event: user.resend_token, method: onUserResendToken }
